apply plugin: 'com.android.library'

android {
    compileSdkVersion global_compileSdkVersion

    defaultConfig {
        minSdkVersion global_minSdkVersion
        targetSdkVersion global_targetSdkVersion
        versionCode 2
        versionName "2.0"
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:but continue the build even when errors are found:
        abortOnError false
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$global_supportVersion"

    implementation project(':library-api')

}

// maven push
apply plugin: 'com.github.wangjiegulu.plg.rapidmavenpush'
rapidMavenPush {
    printProperties = true
    abortOnError = false
    disable = false
    defaultMavenType = 'local'
    mavens {
        maven {
            mavenType = 'local'
            propertyFiles = [
                    file("../mavenupload/maven_common.properties"),
                    file("mavenupload/maven_local.properties")
            ]
            propertyInjectMode = 'replace'
        }
        maven {
            mavenType = 'company'
            propertyFiles = [
                    file("../mavenupload/maven_common.properties"),
                    file("mavenupload/maven_company.properties")
            ]
            propertyInjectMode = 'replace'
        }
        maven {
            mavenType = 'central'
            propertyFiles = [
                    file("../mavenupload/maven_common.properties"),
                    file("mavenupload/maven_central.properties")
            ]
            propertyInjectMode = 'replace'
        }
    }
}

// meta-inf
import com.wangjiegulu.plg.rapidmavenpush.RapidParameterParser
apply plugin: 'com.github.wangjiegulu.plg.rapidmetainf'
project.afterEvaluate {
    // META-INF properties
    rapidmetainf {
        RapidParameterParser rapidParameterParser = new RapidParameterParser(project)
        metaInfName 'RAPIDORM.properties'
        metaInfProperties "archiveName=${rapidParameterParser.getStringParameter('POM_ARCHIVE_ID')}",
                "archiveVersion=${rapidParameterParser.getStringParameter('POM_ARCHIVE_VERSION_NAME')}",
                "archiveUrl=${rapidParameterParser.getStringParameter('POM_URL')}",
                "author=${rapidParameterParser.getStringParameter('POM_DEVELOPER_NAME')}",
                "authorEmail=${rapidParameterParser.getStringParameter('POM_DEVELOPER_EMAIL')}"
    }
}


